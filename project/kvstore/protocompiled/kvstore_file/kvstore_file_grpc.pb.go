// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kvstore_file.proto

package kvstore_file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	// Client asks (key, "", "") for given key. Server returns (value, ts)
	GetTest(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Record, opts ...grpc.CallOption) (Store_GetClient, error)
	// Client asks to Set (key, value, timestamp). Servers replies with an Ack
	Set(ctx context.Context, in *Record, opts ...grpc.CallOption) (*AckMsg, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) GetTest(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/kvstoreProtoFile.Store/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Get(ctx context.Context, in *Record, opts ...grpc.CallOption) (Store_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[0], "/kvstoreProtoFile.Store/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_GetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type storeGetClient struct {
	grpc.ClientStream
}

func (x *storeGetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) Set(ctx context.Context, in *Record, opts ...grpc.CallOption) (*AckMsg, error) {
	out := new(AckMsg)
	err := c.cc.Invoke(ctx, "/kvstoreProtoFile.Store/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	// Client asks (key, "", "") for given key. Server returns (value, ts)
	GetTest(context.Context, *Record) (*Response, error)
	Get(*Record, Store_GetServer) error
	// Client asks to Set (key, value, timestamp). Servers replies with an Ack
	Set(context.Context, *Record) (*AckMsg, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) GetTest(context.Context, *Record) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedStoreServer) Get(*Record, Store_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStoreServer) Set(context.Context, *Record) (*AckMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvstoreProtoFile.Store/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetTest(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Record)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).Get(m, &storeGetServer{stream})
}

type Store_GetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type storeGetServer struct {
	grpc.ServerStream
}

func (x *storeGetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Store_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvstoreProtoFile.Store/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Set(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvstoreProtoFile.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _Store_GetTest_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Store_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Store_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kvstore_file.proto",
}
