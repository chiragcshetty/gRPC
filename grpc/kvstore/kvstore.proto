syntax = "proto3";
package kvstoreProto;

option go_package = "protocompiled/kvstore";


// Interface exported by the server.
service Store {

  // Client asks (key, "", "") for given key. Server returns (value, ts)
  rpc Get(Record) returns (ValueTs) {}

  // Client asks to Set (key, value, timestamp). Servers replies with an Ack
  rpc Set(Record) returns (AckMsg) {}

}

// Record = (key, value, ts)
message Record {
    // key is 24 bytes, but we are not enforcing it. 
	// Using a string instead (note: '[]byte' can't be used as map key in golang)
    // bytes key = 1;
    string key = 1;
    ValueTs valuets = 2;
}

// (value, ts) is defined as a separate protobuf object, so that it can also be used to store 
// at the server as a map of key->ValueTs proto object (rather than extracting it from Record and
// putting it back to the map)
message ValueTs{
    string value = 1;
    float ts = 2; // timestamp (its float because ts = localCounter.clientID)
}

message AckMsg {
    // ack by server to a Set sent by client
    bool ack = 1;
}



//############### INFO #####################
// 'bytes': Any arbitrary sequence of bytes no longer than 2^32
// source: https://protobuf.dev/programming-guides/proto3/#scalar
